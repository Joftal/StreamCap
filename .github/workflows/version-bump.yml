name: Version Bump

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: '版本更新类型 (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  bump-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install toml

      - name: Bump version
        id: bump_version
        run: |
          python -c "
          import toml
          import re
          import sys
          import os
          import json
          
          # 读取当前版本
          with open('pyproject.toml', 'r', encoding='utf-8') as f:
              data = toml.load(f)
          
          current_version = data['project']['version']
          print(f'当前版本: {current_version}')
          
          # 解析版本号
          major, minor, patch = map(int, current_version.split('.'))
          
          # 根据输入更新版本号
          version_type = '${{ github.event.inputs.version_type }}'
          if version_type == 'major':
              major += 1
              minor = 0
              patch = 0
          elif version_type == 'minor':
              minor += 1
              patch = 0
          else:  # patch
              patch += 1
          
          new_version = f'{major}.{minor}.{patch}'
          print(f'新版本: {new_version}')
          
          # 更新pyproject.toml
          data['project']['version'] = new_version
          with open('pyproject.toml', 'w', encoding='utf-8') as f:
              toml.dump(data, f)
          
          # 更新 config/version.json
          try:
              with open('config/version.json', 'r', encoding='utf-8') as f:
                  version_data = json.load(f)
              
              # 更新所有版本相关字段
              version_data['version'] = new_version
              version_data['version_updates'][0]['version'] = new_version
              
              # 保持 kernel_version 不变
              print(f'保持 kernel_version 为: {version_data["kernel_version"]}')
              
              with open('config/version.json', 'w', encoding='utf-8') as f:
                  json.dump(version_data, f, indent=2, ensure_ascii=False)
              print(f'已更新 config/version.json 中的版本号为: {new_version}')
          except Exception as e:
              print(f'更新 config/version.json 时出错: {e}')
          
          # 输出新版本号供后续步骤使用
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f'new_version={new_version}\\n')
          "

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pyproject.toml config/version.json
          git commit -m "chore: 版本更新至 ${{ steps.bump_version.outputs.new_version }}"
          git push

      - name: Create version tag
        run: |
          git tag -a v${{ steps.bump_version.outputs.new_version }} -m "Release v${{ steps.bump_version.outputs.new_version }}"
          git push origin v${{ steps.bump_version.outputs.new_version }}
          
      - name: Verify tag was pushed
        run: |
          echo "检查标签是否成功推送..."
          # 等待几秒钟确保GitHub API已更新
          sleep 5
          # 检查远程标签是否存在
          if git ls-remote --tags origin | grep -q "v${{ steps.bump_version.outputs.new_version }}"; then
            echo "✅ 标签 v${{ steps.bump_version.outputs.new_version }} 已成功推送"
          else
            echo "❌ 标签推送失败，请检查权限设置"
            exit 1
          fi 
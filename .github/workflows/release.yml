# -*- mode: python ; coding: utf-8 -*-
name: Release

on:
  push:
    tags:
      - 'v*'
    branches:
      - dev

jobs:
  create_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      is_tag: ${{ startsWith(github.ref, 'refs/tags/') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          echo "生成版本更新日志..."
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            git log --pretty=format:"* %s" > CHANGELOG.md
          else
            git log --pretty=format:"* %s" $PREV_TAG..HEAD > CHANGELOG.md
          fi
          
          # 添加分隔线和固定内容
          echo -e "\n\n---\n\n**下载指南**：\nStreamCap-Windows-Console.zip是带控制台版本的执行文件，一般用户可直接下载StreamCap-Windows-GUI.zip。" >> CHANGELOG.md

      - name: Create Release (only for tags)
        id: create_release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: StreamCap ${{ github.ref_name }}
          draft: false
          prerelease: false
          body_path: CHANGELOG.md
      
      # 更新版本号
      - name: Update version.json
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "更新版本号..."
          VERSION=${{ github.ref_name }}
          VERSION=${VERSION#v}  # 移除 v 前缀
          
          # 读取当前的 version.json
          cat config/version.json > version.json.tmp
          
          # 使用 jq 更新版本号
          jq --arg version "$VERSION" '.version_updates[0].version = $version' version.json.tmp > config/version.json
          
          # 清理临时文件
          rm version.json.tmp
          
          echo "版本号已更新为: $VERSION"
      
      # 为dev分支创建一个模拟的upload_url输出，避免后续任务失败
      - name: Set mock upload URL for dev branch
        if: github.ref == 'refs/heads/dev'
        id: mock_upload_url
        run: |
          echo "upload_url=https://mock-url-for-dev-branch" >> $GITHUB_OUTPUT
          echo "is_tag=false" >> $GITHUB_OUTPUT

  build-windows-gui:
    needs: create_release
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-win.txt
          pip install pyinstaller

      # 更新版本号（如果是标签构建）
      - name: Update version.json for Windows build
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "更新 Windows 构建的版本号..."
          $version = "${{ github.ref_name }}" -replace '^v', ''
          
          # 读取当前的 version.json
          $versionJson = Get-Content -Raw -Path config/version.json | ConvertFrom-Json
          
          # 更新版本号
          $versionJson.version_updates[0].version = $version
          
          # 保存更新后的文件
          $versionJson | ConvertTo-Json -Depth 10 | Set-Content -Path config/version.json -Encoding UTF8
          
          echo "Windows 构建版本号已更新为: $version"

      - name: Create logger_fix.py for GUI mode
        run: |
          $loggerFixContent = @'
          import os
          import sys
          import re

          from loguru import logger

          script_path = os.path.split(os.path.realpath(sys.argv[0]))[0]

          # 添加内存清理日志过滤器
          def is_memory_cleanup_log(record):
              """检查是否为内存清理相关的日志"""
              message = record["message"]
              memory_cleanup_patterns = [
                  r"执行轻量级清理任务",
                  r"执行完整清理任务",
                  r"轻量级清理",
                  r"完整清理",
                  r"内存使用率过高",
                  r"内存使用详情",
                  r"系统统计",
                  r"系统状态",
                  r"开始执行完整清理",
                  r"内存使用率:",
                  r"实例清理",
                  r"实例统计",
                  r"实例管理",
                  r"平台处理器实例统计",
                  r"进程管理 -",
                  r"添加ffmpeg进程",
                  r"添加进程后",
                  r"当前活跃进程数",
                  r"当前所有进程PID列表",
                  r"检测到已终止的进程",
                  r"开始清理所有进程",
                  r"进程管理器初始化完成",
                  r"系统信息:",
                  r"系统进程验证通过",
                  r"进程状态验证",
                  r"开始验证所有进程状态",
                  r"打包环境中检测到进程不存在",
                  r"进程不存在于系统中",
                  r"进程在系统中不存在",
                  r"在打包环境中，手动将进程标记为已终止",
                  r"验证进程时出错",
                  r"验证进程状态时出错",
                  r"准备启动FFmpeg进程",
                  r"FFmpeg进程已创建",
                  r"FFmpeg进程状态验证",
                  r"FFmpeg进程不存在于系统中",
                  r"FFmpeg进程已不存在于系统中",
                  r"验证FFmpeg进程状态时出错",
                  r"开始检查系统中的所有进程",
                  r"发现FFmpeg进程",
                  r"系统中发现.*个FFmpeg进程",
                  r"系统中发现.*个Python进程",
                  r"我们的进程列表中PID=",
                  r"检查系统进程时出错",
                  # 测试脚本中使用的内存相关日志模式
                  r"开始内存测试",
                  r"内存状态",
                  r"创建实例",
                  r"内存测试总结",
                  r"主动触发垃圾回收",
                  r"显式清理未使用的实例",
                  r"等待.*秒让自动清理机制工作",
                  r"清理实例后",
                  r"开始内存优化测试"
              ]
              return any(re.search(pattern, message) for pattern in memory_cleanup_patterns)

          # 添加一个普通日志的过滤器
          def not_memory_cleanup_log(record):
              return not is_memory_cleanup_log(record)

          # 确保日志目录存在
          os.makedirs(f"{script_path}/logs", exist_ok=True)

          # 检查是否为GUI模式（没有控制台）
          is_gui_mode = False
          try:
              # 尝试写入stderr，如果失败则认为是GUI模式
              sys.stderr.write("")
          except Exception:
              is_gui_mode = True

          # 根据模式选择日志配置
          if not is_gui_mode:
              # 控制台模式：添加控制台输出处理器
              logger.add(
                  sys.stderr,
                  level="DEBUG",
                  format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {message}",
                  enqueue=True,
              )
          else:
              # GUI模式：添加内存清理日志文件处理器
              logger.add(
                  f"{script_path}/logs/memory_clean.log",
                  level="DEBUG",
                  format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:{function}:{line} - {message}",
                  filter=lambda i: is_memory_cleanup_log(i),
                  serialize=False,
                  enqueue=True,
                  retention=3,
                  rotation="3 MB",
                  encoding="utf-8",
              )

          # 无论何种模式，都添加文件日志处理器
          # 文件日志处理器，排除内存清理日志
          logger.add(
              f"{script_path}/logs/streamget.log",
              level="DEBUG",
              format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:{function}:{line} - {message}",
              filter=lambda i: not_memory_cleanup_log(i) and i["level"].name != "STREAM",
              serialize=False,
              enqueue=True,
              retention=3,
              rotation="3 MB",
              encoding="utf-8",
          )

          logger.level("STREAM", no=22, color="<blue>")
          logger.add(
              f"{script_path}/logs/play_url.log",
              level="STREAM",
              format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {message}",
              filter=lambda i: i["level"].name == "STREAM",
              serialize=False,
              enqueue=True,
              retention=1,
              rotation="500 KB",
              encoding="utf-8",
          )
          '@
          
          # 创建app/utils目录（如果不存在）
          New-Item -ItemType Directory -Force -Path "app/utils" | Out-Null
          
          # 创建logger_fix.py文件
          Set-Content -Path "app/utils/logger_fix.py" -Value $loggerFixContent
          
          # 备份原始logger.py
          if (Test-Path -Path "app/utils/logger.py") {
            Copy-Item -Path "app/utils/logger.py" -Destination "app/utils/logger.py.bak" -Force
          }
          
          # 应用修复
          Copy-Item -Path "app/utils/logger_fix.py" -Destination "app/utils/logger.py" -Force
          
          Write-Host "Logger fix applied for GUI mode"

      - name: Build Windows GUI executable
        run: |
          # 使用修改后的logger模块构建GUI版本
          pyinstaller --name StreamCap -D --noconsole --icon=assets/icon.ico main.py
          
          # 创建必要的目录和文件
          New-Item -ItemType Directory -Force -Path "dist/StreamCap/downloads" | Out-Null
          New-Item -ItemType Directory -Force -Path "dist/StreamCap/logs" | Out-Null
          New-Item -ItemType File -Force -Path "dist/StreamCap/logs/play_url.log" | Out-Null
          New-Item -ItemType File -Force -Path "dist/StreamCap/logs/streamget.log" | Out-Null
          New-Item -ItemType File -Force -Path "dist/StreamCap/logs/memory_clean.log" | Out-Null
          
          # 复制资源文件夹到dist/StreamCap目录
          Copy-Item -Path "assets" -Destination "dist/StreamCap/" -Recurse -Force
          Copy-Item -Path "config" -Destination "dist/StreamCap/" -Recurse -Force
          Copy-Item -Path "locales" -Destination "dist/StreamCap/" -Recurse -Force
          
          Write-Host "Successfully built StreamCap GUI version"

      - name: Create ZIP archive (GUI)
        run: |
          # 压缩整个dist/StreamCap目录
          Compress-Archive -Path "dist/StreamCap/*" -DestinationPath "StreamCap-Windows-GUI.zip" -Force

      - name: Upload Windows GUI build to release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./StreamCap-Windows-GUI.zip
          asset_name: StreamCap-Windows-GUI.zip
          asset_content_type: application/zip

      - name: Upload Windows GUI build as artifact
        if: github.ref == 'refs/heads/dev'
        uses: actions/upload-artifact@v4
        with:
          name: StreamCap-Windows-GUI
          path: ./StreamCap-Windows-GUI.zip

  build-windows-console:
    needs: create_release
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # 更新版本号（如果是标签构建）
      - name: Update version.json for Windows Console build
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "更新 Windows Console 构建的版本号..."
          $version = "${{ github.ref_name }}" -replace '^v', ''
          
          # 读取当前的 version.json
          $versionJson = Get-Content -Raw -Path config/version.json | ConvertFrom-Json
          
          # 更新版本号
          $versionJson.version_updates[0].version = $version
          
          # 保存更新后的文件
          $versionJson | ConvertTo-Json -Depth 10 | Set-Content -Path config/version.json -Encoding UTF8
          
          echo "Windows Console 构建版本号已更新为: $version"

      - name: Build Windows Console executable
        run: |
          # 构建控制台版本
          pyinstaller --name StreamCap -D --console --icon=assets/icon.ico main.py
          
          # 创建必要的目录和文件
          New-Item -ItemType Directory -Force -Path "dist/StreamCap/downloads" | Out-Null
          New-Item -ItemType Directory -Force -Path "dist/StreamCap/logs" | Out-Null
          New-Item -ItemType File -Force -Path "dist/StreamCap/logs/play_url.log" | Out-Null
          New-Item -ItemType File -Force -Path "dist/StreamCap/logs/streamget.log" | Out-Null
          
          # 复制资源文件夹到dist/StreamCap目录
          Copy-Item -Path "assets" -Destination "dist/StreamCap/" -Recurse -Force
          Copy-Item -Path "config" -Destination "dist/StreamCap/" -Recurse -Force
          Copy-Item -Path "locales" -Destination "dist/StreamCap/" -Recurse -Force
          
          Write-Host "Successfully built StreamCap Console version"

      - name: Create ZIP archive (Console)
        run: |
          # 压缩整个dist/StreamCap目录
          Compress-Archive -Path "dist/StreamCap/*" -DestinationPath "StreamCap-Windows-Console.zip" -Force

      - name: Upload Windows Console build to release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./StreamCap-Windows-Console.zip
          asset_name: StreamCap-Windows-Console.zip
          asset_content_type: application/zip

      - name: Upload Windows Console build as artifact
        if: github.ref == 'refs/heads/dev'
        uses: actions/upload-artifact@v4
        with:
          name: StreamCap-Windows-Console
          path: ./StreamCap-Windows-Console.zip

  build-macos:
    needs: create_release
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-mac.txt
          pip install pyinstaller

      # 更新版本号（如果是标签构建）
      - name: Update version.json for macOS build
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "更新 macOS 构建的版本号..."
          VERSION=${{ github.ref_name }}
          VERSION=${VERSION#v}  # 移除 v 前缀
          
          # 读取当前的 version.json
          cat config/version.json > version.json.tmp
          
          # 使用 jq 更新版本号
          jq --arg version "$VERSION" '.version_updates[0].version = $version' version.json.tmp > config/version.json
          
          # 清理临时文件
          rm version.json.tmp
          
          echo "macOS 构建版本号已更新为: $VERSION"

      - name: Prepare icon file
        run: |
          if [ -f "assets/icon.ico" ]; then
            mkdir -p assets/images
            cp assets/icon.ico assets/images/logo.ico
            echo "Icon file copied to assets/images/logo.ico"
          else
            echo "Warning: Icon file assets/icon.ico not found. Using default icon."
          fi

      - name: Build macOS app with dependencies (-D mode)
        run: |
          # 使用-D选项创建目录模式的打包
          if [ -f "assets/images/logo.icns" ]; then
            pyinstaller --name StreamCap -D --windowed --icon=assets/images/logo.icns main.py
          else
            pyinstaller --name StreamCap -D --windowed main.py
          fi
          
          # 创建必要的目录和文件
          mkdir -p dist/StreamCap/downloads
          mkdir -p dist/StreamCap/logs
          touch dist/StreamCap/logs/play_url.log
          touch dist/StreamCap/logs/streamget.log
          
          # 复制资源文件夹到dist/StreamCap目录
          if [ ! -d "dist/StreamCap/assets" ]; then
            cp -r assets dist/StreamCap/
          fi
          if [ ! -d "dist/StreamCap/config" ]; then
            cp -r config dist/StreamCap/
          fi
          if [ ! -d "dist/StreamCap/locales" ]; then
            cp -r locales dist/StreamCap/
          fi
          
          echo "Successfully built StreamCap with dependencies in directory mode"

      - name: Debug directory contents
        run: |
          echo "dist/StreamCap directory structure:"
          find ./dist/StreamCap -maxdepth 2

      - name: Create DMG
        run: |
          # 直接从dist/StreamCap创建DMG
          hdiutil create -volname StreamCap -srcfolder dist/StreamCap -ov -format UDZO StreamCap-macOS.dmg

      - name: Upload macOS build to release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./StreamCap-macOS.dmg
          asset_name: StreamCap-macOS.dmg
          asset_content_type: application/octet-stream

      - name: Upload macOS build as artifact
        if: github.ref == 'refs/heads/dev'
        uses: actions/upload-artifact@v4
        with:
          name: StreamCap-macOS
          path: ./StreamCap-macOS.dmg

  build-docker:
    needs: create_release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Set Docker tags
        id: docker_tags
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "DOCKER_TAGS=${{ secrets.DOCKER_HUB_USERNAME }}/streamcap:latest,${{ secrets.DOCKER_HUB_USERNAME }}/streamcap:${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            echo "DOCKER_TAGS=${{ secrets.DOCKER_HUB_USERNAME }}/streamcap:dev" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.docker_tags.outputs.DOCKER_TAGS }} 
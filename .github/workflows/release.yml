name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          echo "生成版本更新日志..."
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            git log --pretty=format:"* %s" > CHANGELOG.md
          else
            git log --pretty=format:"* %s" $PREV_TAG..HEAD > CHANGELOG.md
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: StreamCap ${{ github.ref_name }}
          draft: false
          prerelease: false
          body_path: CHANGELOG.md

  build-windows:
    needs: create_release
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Prepare icon file
        run: |
          if (Test-Path -Path "assets\icon.ico") {
            New-Item -ItemType Directory -Force -Path "assets\images" | Out-Null
            Copy-Item -Path "assets\icon.ico" -Destination "assets\images\logo.ico" -Force
            Write-Host "Icon file copied to assets\images\logo.ico"
          } else {
            Write-Host "Warning: Icon file assets\icon.ico not found. Using default icon."
          }

      - name: Build Windows executable
        run: |
          if (Test-Path -Path "assets\images\logo.ico") {
            pyinstaller --name StreamCap --onefile --windowed --icon=assets/images/logo.ico main.py
          } else {
            pyinstaller --name StreamCap --onefile --windowed main.py
          }

      - name: Create ZIP archive
        run: |
          Compress-Archive -Path dist/StreamCap.exe, assets, config, locales -DestinationPath StreamCap-Windows.zip

      - name: Upload Windows build
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./StreamCap-Windows.zip
          asset_name: StreamCap-Windows.zip
          asset_content_type: application/zip

  build-macos:
    needs: create_release
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Prepare icon file
        run: |
          if [ -f "assets/icon.ico" ]; then
            mkdir -p assets/images
            cp assets/icon.ico assets/images/logo.ico
            echo "Icon file copied to assets/images/logo.ico"
          else
            echo "Warning: Icon file assets/icon.ico not found. Using default icon."
          fi

      - name: Build macOS app
        run: |
          if [ -f "assets/images/logo.icns" ]; then
            pyinstaller --name StreamCap --onefile --windowed --icon=assets/images/logo.icns main.py
          else
            pyinstaller --name StreamCap --onefile --windowed main.py
          fi

      - name: Create DMG
        run: |
          mkdir -p dist/dmg
          cp -r dist/StreamCap.app dist/dmg/
          cp -r assets dist/dmg/
          cp -r config dist/dmg/
          cp -r locales dist/dmg/
          hdiutil create -volname StreamCap -srcfolder dist/dmg -ov -format UDZO StreamCap-macOS.dmg

      - name: Upload macOS build
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./StreamCap-macOS.dmg
          asset_name: StreamCap-macOS.dmg
          asset_content_type: application/octet-stream

  build-docker:
    needs: create_release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/streamcap:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/streamcap:${{ github.ref_name }} 
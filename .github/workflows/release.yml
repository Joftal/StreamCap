name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          echo "生成版本更新日志..."
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            git log --pretty=format:"* %s" > CHANGELOG.md
          else
            git log --pretty=format:"* %s" $PREV_TAG..HEAD > CHANGELOG.md
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: StreamCap ${{ github.ref_name }}
          draft: false
          prerelease: false
          body_path: CHANGELOG.md

  build-windows:
    needs: create_release
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Prepare icon file
        run: |
          if (Test-Path -Path "assets\icon.ico") {
            New-Item -ItemType Directory -Force -Path "assets\images" | Out-Null
            Copy-Item -Path "assets\icon.ico" -Destination "assets\images\logo.ico" -Force
            Write-Host "Icon file copied to assets\images\logo.ico"
          } else {
            Write-Host "Warning: Icon file assets\icon.ico not found. Using default icon."
          }

      - name: Create required directories and files
        run: |
          # 创建downloads空文件夹
          New-Item -ItemType Directory -Force -Path "downloads" | Out-Null
          New-Item -ItemType File -Force -Path "downloads\.gitkeep" | Out-Null
          Write-Host "Created downloads directory with .gitkeep file"
          
          # 创建logs文件夹和必要的日志文件
          New-Item -ItemType Directory -Force -Path "logs" | Out-Null
          New-Item -ItemType File -Force -Path "logs\play_url.log" | Out-Null
          New-Item -ItemType File -Force -Path "logs\streamget.log" | Out-Null
          Write-Host "Created logs directory with required log files"
          
          # 确保logs目录权限正确
          if (Test-Path -Path "logs") {
            $Acl = Get-Acl -Path "logs"
            $Ar = New-Object System.Security.AccessControl.FileSystemAccessRule("Everyone", "FullControl", "ContainerInherit,ObjectInherit", "None", "Allow")
            $Acl.SetAccessRule($Ar)
            Set-Acl -Path "logs" -AclObject $Acl
            Write-Host "Set full permissions on logs directory"
          }

      - name: Build Windows executable with dependencies
        run: |
          # 确保目录存在
          New-Item -ItemType Directory -Force -Path "dist" | Out-Null
          New-Item -ItemType Directory -Force -Path "_internal" | Out-Null
          
          # 构建可执行文件
          if (Test-Path -Path "assets\images\logo.ico") {
            pyinstaller --name StreamCap --add-data "assets;assets" --add-data "config;config" --add-data "locales;locales" --add-data "downloads;downloads" --add-data "logs;logs" --collect-all streamget --collect-all flet --onefile --windowed --icon=assets/images/logo.ico main.py
          } else {
            pyinstaller --name StreamCap --add-data "assets;assets" --add-data "config;config" --add-data "locales;locales" --add-data "downloads;downloads" --add-data "logs;logs" --collect-all streamget --collect-all flet --onefile --windowed main.py
          }
          
          # 安装依赖到_internal目录
          pip install -r requirements.txt --target="_internal"
          Write-Host "Dependencies installed to _internal directory"

      - name: Debug directory contents
        run: |
          Write-Host "Current directory structure:"
          Get-ChildItem -Path .\ -Recurse -Depth 1 | Select-Object FullName
          Write-Host "dist directory:"
          Get-ChildItem -Path .\dist -Recurse -Depth 1 | Select-Object FullName
          Write-Host "_internal directory:"
          Get-ChildItem -Path .\_internal -Recurse -Depth 1 | Select-Object FullName
          Write-Host "downloads directory:"
          Get-ChildItem -Path .\downloads -Recurse -Depth 1 | Select-Object FullName

      - name: Create ZIP archive
        run: |
          # 确保文件和目录存在
          if (-not (Test-Path -Path "dist\StreamCap.exe")) {
            Write-Error "StreamCap.exe not found in dist directory"
            exit 1
          }
          
          # 创建一个临时目录来准备打包内容
          New-Item -ItemType Directory -Force -Path "package" | Out-Null
          Copy-Item -Path "dist\StreamCap.exe" -Destination "package\" -Force
          Copy-Item -Path "assets", "config", "locales" -Destination "package\" -Recurse -Force
          Copy-Item -Path "downloads", "logs" -Destination "package\" -Recurse -Force
          Copy-Item -Path "_internal" -Destination "package\" -Recurse -Force
          
          # 创建ZIP文件
          Compress-Archive -Path "package\*" -DestinationPath "StreamCap-Windows.zip" -Force

      - name: Upload Windows build
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./StreamCap-Windows.zip
          asset_name: StreamCap-Windows.zip
          asset_content_type: application/zip

  build-macos:
    needs: create_release
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Prepare icon file
        run: |
          if [ -f "assets/icon.ico" ]; then
            mkdir -p assets/images
            cp assets/icon.ico assets/images/logo.ico
            echo "Icon file copied to assets/images/logo.ico"
          else
            echo "Warning: Icon file assets/icon.ico not found. Using default icon."
          fi

      - name: Create required directories and files
        run: |
          # 创建downloads空文件夹
          mkdir -p downloads
          touch downloads/.gitkeep
          echo "Created downloads directory with .gitkeep file"
          
          # 创建logs文件夹和必要的日志文件
          mkdir -p logs
          touch logs/play_url.log
          touch logs/streamget.log
          echo "Created logs directory with required log files"
          
          # 确保logs目录权限正确
          chmod -R 777 logs
          echo "Set full permissions on logs directory"

      - name: Build macOS app with dependencies
        run: |
          # 确保目录存在
          mkdir -p dist
          mkdir -p _internal
          
          # 构建可执行文件
          if [ -f "assets/images/logo.icns" ]; then
            pyinstaller --name StreamCap --add-data "assets:assets" --add-data "config:config" --add-data "locales:locales" --add-data "downloads:downloads" --add-data "logs:logs" --collect-all streamget --collect-all flet --onefile --windowed --icon=assets/images/logo.icns main.py
          else
            pyinstaller --name StreamCap --add-data "assets:assets" --add-data "config:config" --add-data "locales:locales" --add-data "downloads:downloads" --add-data "logs:logs" --collect-all streamget --collect-all flet --onefile --windowed main.py
          fi
          
          # 安装依赖到_internal目录
          pip install -r requirements.txt --target="_internal"
          echo "Dependencies installed to _internal directory"

      - name: Debug directory contents
        run: |
          echo "Current directory structure:"
          find . -maxdepth 2 -type d
          echo "dist directory:"
          find ./dist -maxdepth 2
          echo "_internal directory:"
          find ./_internal -maxdepth 2
          echo "downloads directory:"
          find ./downloads -maxdepth 2

      - name: Create DMG
        run: |
          # 创建一个临时目录来准备打包内容
          mkdir -p dist/dmg
          
          # 复制应用和必要的文件
          cp -r dist/StreamCap.app dist/dmg/
          cp -r assets dist/dmg/
          cp -r config dist/dmg/
          cp -r locales dist/dmg/
          cp -r downloads dist/dmg/
          cp -r logs dist/dmg/
          cp -r _internal dist/dmg/
          
          # 创建DMG
          hdiutil create -volname StreamCap -srcfolder dist/dmg -ov -format UDZO StreamCap-macOS.dmg

      - name: Upload macOS build
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./StreamCap-macOS.dmg
          asset_name: StreamCap-macOS.dmg
          asset_content_type: application/octet-stream

  build-docker:
    needs: create_release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/streamcap:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/streamcap:${{ github.ref_name }} 